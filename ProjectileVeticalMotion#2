using System;

namespace calc
{
    internal class ProjectileVerticalMotion
    {
        public static void Vertical()
        {
            Console.WriteLine("To work out vertical components we are going to have to use the other suvat equations");
            Console.WriteLine("Does the projectile start from the ground or an elevated position");

            if (Console.ReadLine() == "ground")
            {
                Console.WriteLine(
                    "Pick the appropriate suvat equation to use : v^2 = u^2 + 2as , s = ut + 1/2 at^2 , s = vt - 1/2 at^2 , v = u + at , s = 1/2(u + v)t, you can write the numbers 1-5 in corresponding order");
                var option = Console.ReadLine();

                switch (option)
                {
                    case "1":
                    {
                        Console.WriteLine(
                            "This is the equation to workout final velocity but can be manipulated to workout other components");
                        Console.WriteLine("Do you want to workout velocity");
                        if (Console.ReadLine() == "yes")
                        {
                            var u = Utility.Ask("What is the initial velocity \n");
                            var a = Utility.Ask("What is the acceleration \n");
                            var s = Utility.Ask("What is the distance \n");
                            var velocity = Math.Sqrt(u * u + 2 * a * s);
                            Console.WriteLine(velocity);
                        }
                        else
                        {
                            Console.WriteLine("Do you want to workout initial velocity, acceleration or distance?");
                            if (Console.ReadLine() == "initial velocity")
                            {
                                var v = Utility.Ask("What is the velocity \n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var s = Utility.Ask("What is the distance \n");
                                var velocity = Math.Sqrt(v * v - 2 * a * s);
                                Console.WriteLine(velocity);
                            }

                            if (Console.ReadLine() == "acceleration")
                            {
                                var v = Utility.Ask("What is the velocity \n");
                                var s = Utility.Ask("What is the distance \n");
                                var u = Utility.Ask("What is the initial velocity \n");
                                var acceleration = (v * v - u * u) / (2 * s);
                                Console.WriteLine(acceleration);
                            }

                            else
                            {
                                var v = Utility.Ask("What is the velocity \n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var u = Utility.Ask("What is the initial velocity \n");
                                var distance = (v * v - u * u) / (2 * a);
                                Console.WriteLine(distance);
                            }
                        }

                        break;
                    }
                    case "2":
                    {
                        Console.WriteLine(
                            "This is the equation to workout distance when initial velocity is known but can be manipulated to workout other components");
                        Console.WriteLine("Do you want to workout distance");
                        if (Console.ReadLine() == "yes")
                        {
                            var u = Utility.Ask("What is the initial velocity \n");
                            var a = Utility.Ask("What is the acceleration \n");
                            var t = Utility.Ask("What is the time \n");
                            var distance = u * t + 0.5 * a * (t * t);
                            Console.WriteLine(distance);
                        }

                        else
                        {
                            Console.WriteLine("Do you want to workout initial velocity, acceleration or time?");
                            var option1 = Console.ReadLine();
                            if (option1 == "initial velocity")
                            {
                                var s = Utility.Ask("What is the distance \n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var t = Utility.Ask("What is the time \n");
                                var initialvelocity = (s - 0.5 * a * (t * t)) / t;
                                Console.WriteLine(initialvelocity);
                            }

                            if (option1 == "acceleration")
                            {
                                var t = Utility.Ask("What is the time \n");
                                var s = Utility.Ask("What is the distance \n");
                                var u = Utility.Ask("What is the initial velocity \n");
                                var acceleration = (s - u * t) / (0.5 * (t * t));
                                Console.WriteLine(acceleration);
                            }

                            else
                            {
                                var s = Utility.Ask("What is the distance \n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var u = Utility.Ask("What is the initial velocity \n");
                                var time = (-u + Math.Sqrt(u * u - 2 * a * -s)) / a;
                                var time1 = (-u - Math.Sqrt(u * u - 2 * a * -s)) / a;
                                Console.WriteLine(time);
                                Console.WriteLine(time1);
                                Console.WriteLine(
                                    "Is this question asking for the length of time a particle is above a particular height");
                                if (Console.ReadLine() == "yes") Console.WriteLine(time1 - time);
                            }
                        }

                        break;
                    }
                    case "3":
                    {
                        Console.WriteLine(
                            "This is the equation to workout distance when final velocity is known but can be manipulated to workout other components");
                        Console.WriteLine("Do you want to workout distance");
                        if (Console.ReadLine() == "yes")
                        {
                            var v = Utility.Ask("What is the final velocity  \n");
                            var a = Utility.Ask("What is the acceleration \n");
                            var t = Utility.Ask("What is the time\n");
                            var distance = v * t - 0.5 * a * (t * t);
                            Console.WriteLine(distance);
                        }
                        else
                        {
                            Console.WriteLine("Do you want to workout final velocity, acceleration or time?");
                            var option1 = Console.ReadLine();
                            if (option1 == "final velocity")
                            {
                                var s = Utility.Ask("What is the distance \n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var t = Utility.Ask("What is the time \n");
                                var finalV = (s + 0.5 * a * (t * t)) / t;
                                Console.WriteLine(finalV);
                            }

                            if (option1 == "acceleration")
                            {
                                var v = Utility.Ask("What is the final velocity \n");
                                var s = Utility.Ask("What is the distance \n");
                                var t = Utility.Ask(" What is the time\n");
                                var acceleration = (v * t - s) / 0.5 * (t * t);
                                Console.WriteLine(acceleration);
                            }
                            else
                            {
                                var v = Utility.Ask(" What is the final velocity\n");
                                var a = Utility.Ask("What is the acceleration \n");
                                var s = Utility.Ask("What is the distance \n");
                                var time = (-v + Math.Sqrt(v * v - 2 * a * s)) / a;
                                var time1 = (-v - Math.Sqrt(v * v - 2 * a * s)) / a;
                                Console.WriteLine(time);
                                Console.WriteLine(time1);
                            }
                        }

                        break;
                    }
                    case "4":
                    {
                        break;
                    }
                    case "5":
                    {
                        break;
                    }
                }
            }
            else
            {
                
            }
        }
    }
}
